const { body } = require("express-validator");

const spaceTrackValidation = {
  create: [
    body("spaceTrack")
      .exists()
      .withMessage("Space track is required")
      .notEmpty()
      .withMessage("Space track cannot be null"),
    body("spaceTrack.CCSDS_OMM_VERS")
      .exists()
      .withMessage("CCSDS_OMM_VERS is required")
      .notEmpty()
      .withMessage("CCSDS_OMM_VERS cannot be null")
      .isLength({ max: 3 })
      .withMessage("CCSDS_OMM_VERS must have 3 characters maximum"),
    body("spaceTrack.COMMENT")
      .exists()
      .withMessage("COMMENT is required")
      .notEmpty()
      .withMessage("COMMENT cannot be null")
      .isLength({ max: 33 })
      .withMessage("COMMENT must have 33 characters maximum"),
    body("spaceTrack.CREATION_DATE")
      .exists()
      .withMessage("CREATION_DATE is required")
      .notEmpty()
      .withMessage("CREATION_DATE cannot be null")
      .isLength({ max: 19 })
      .withMessage("CREATION_DATE must have 19 characters maximum"),
    body("spaceTrack.ORIGINATOR")
      .exists()
      .withMessage("ORIGINATOR is required")
      .notEmpty()
      .withMessage("ORIGINATOR cannot be null")
      .isLength({ max: 7 })
      .withMessage("ORIGINATOR must have 7 characters maximum"),
    body("spaceTrack.OBJECT_NAME")
      .exists()
      .withMessage("OBJECT_NAME is required")
      .notEmpty()
      .withMessage("OBJECT_NAME cannot be null")
      .isLength({ max: 25 })
      .withMessage("OBJECT_NAME must have 25 characters maximum"),
    body("spaceTrack.OBJECT_ID")
      .exists()
      .withMessage("OBJECT_ID is required")
      .isLength({ max: 12 })
      .withMessage("OBJECT_ID must have 12 characters maximum"),
    body("spaceTrack.CENTER_NAME")
      .exists()
      .withMessage("CENTER_NAME is required")
      .notEmpty()
      .withMessage("CENTER_NAME cannot be null")
      .isLength({ max: 5 })
      .withMessage("CENTER_NAME must have 5 characters maximum"),
    body("spaceTrack.REF_FRAME")
      .exists()
      .withMessage("REF_FRAME is required")
      .notEmpty()
      .withMessage("REF_FRAME cannot be null")
      .isLength({ max: 4 })
      .withMessage("REF_FRAME must have 4 characters maximum"),
    body("spaceTrack.TIME_SYSTEM")
      .exists()
      .withMessage("TIME_SYSTEM is required")
      .notEmpty()
      .withMessage("TIME_SYSTEM cannot be null")
      .isLength({ max: 3 })
      .withMessage("TIME_SYSTEM must have 3 characters maximum"),
    body("spaceTrack.MEAN_ELEMENT_THEORY")
      .exists()
      .withMessage("MEAN_ELEMENT_THEORY is required")
      .notEmpty()
      .withMessage("MEAN_ELEMENT_THEORY cannot be null")
      .isLength({ max: 4 })
      .withMessage("MEAN_ELEMENT_THEORY must have 4 characters maximum"),
    body("spaceTrack.EPOCH")
      .exists()
      .withMessage("EPOCH is required")
      .isLength({ max: 26 })
      .withMessage("EPOCH must have 26 characters maximum"),
    body("spaceTrack.MEAN_MOTION")
      .exists()
      .withMessage("MEAN_MOTION is required")
      .notEmpty()
      .withMessage("MEAN_MOTION cannot be null")
      .isFloat()
      .withMessage("MEAN_MOTION must be float"),
    body("spaceTrack.ECCENTRICITY")
      .exists()
      .withMessage("ECCENTRICITY is required")
      .notEmpty()
      .withMessage("ECCENTRICITY cannot be null")
      .isFloat()
      .withMessage("ECCENTRICITY must be float"),
    body("spaceTrack.INCLINATION")
      .exists()
      .withMessage("INCLINATION is required")
      .notEmpty()
      .withMessage("INCLINATION cannot be null")
      .isFloat()
      .withMessage("INCLINATION must be float"),
    body("spaceTrack.RA_OF_ASC_NODE")
      .exists()
      .withMessage("RA_OF_ASC_NODE is required")
      .notEmpty()
      .withMessage("RA_OF_ASC_NODE cannot be null")
      .isFloat()
      .withMessage("RA_OF_ASC_NODE must be float"),
    body("spaceTrack.ARG_OF_PERICENTER")
      .exists()
      .withMessage("ARG_OF_PERICENTER is required")
      .notEmpty()
      .withMessage("ARG_OF_PERICENTER cannot be null")
      .isFloat()
      .withMessage("ARG_OF_PERICENTER must be float"),
    body("spaceTrack.MEAN_ANOMALY")
      .exists()
      .withMessage("MEAN_ANOMALY is required")
      .notEmpty()
      .withMessage("MEAN_ANOMALY cannot be null")
      .isFloat()
      .withMessage("MEAN_ANOMALY must be float"),
    body("spaceTrack.EPHEMERIS_TYPE")
      .exists()
      .withMessage("EPHEMERIS_TYPE is required")
      .notEmpty()
      .withMessage("EPHEMERIS_TYPE cannot be null")
      .isInt()
      .withMessage("EPHEMERIS_TYPE must be int"),
    body("spaceTrack.CLASSIFICATION_TYPE")
      .exists()
      .withMessage("CLASSIFICATION_TYPE is required")
      .notEmpty()
      .withMessage("CLASSIFICATION_TYPE cannot be null")
      .isLength({ max: 1 })
      .withMessage("CLASSIFICATION_TYPE must have 1 characters maximum"),
    body("spaceTrack.NORAD_CAT_ID")
      .exists()
      .withMessage("NORAD_CAT_ID is required")
      .isInt()
      .withMessage("NORAD_CAT_ID must be int"),
    body("spaceTrack.ELEMENT_SET_NO")
      .exists()
      .withMessage("ELEMENT_SET_NO is required")
      .notEmpty()
      .withMessage("ELEMENT_SET_NO cannot be null")
      .isInt()
      .withMessage("ELEMENT_SET_NO must be int"),
    body("spaceTrack.REV_AT_EPOCH")
      .exists()
      .withMessage("REV_AT_EPOCH is required")
      .notEmpty()
      .withMessage("REV_AT_EPOCH cannot be null")
      .isFloat()
      .withMessage("REV_AT_EPOCH must be float"),
    body("spaceTrack.BSTAR")
      .exists()
      .withMessage("BSTAR is required")
      .notEmpty()
      .withMessage("BSTAR cannot be null")
      .isFloat()
      .withMessage("BSTAR must be float"),
    body("spaceTrack.MEAN_MOTION_DOT")
      .exists()
      .withMessage("MEAN_MOTION_DOT is required")
      .notEmpty()
      .withMessage("MEAN_MOTION_DOT cannot be null")
      .isFloat()
      .withMessage("MEAN_MOTION_DOT must be float"),
    body("spaceTrack.MEAN_MOTION_DDOT")
      .exists()
      .withMessage("MEAN_MOTION_DDOT is required")
      .notEmpty()
      .withMessage("MEAN_MOTION_DDOT cannot be null")
      .isFloat()
      .withMessage("MEAN_MOTION_DDOT must be float"),
    body("spaceTrack.SEMIMAJOR_AXIS")
      .exists()
      .withMessage("SEMIMAJOR_AXIS is required")
      .notEmpty()
      .withMessage("SEMIMAJOR_AXIS cannot be null")
      .isFloat()
      .withMessage("SEMIMAJOR_AXIS must be float"),
    body("spaceTrack.PERIOD")
      .exists()
      .withMessage("PERIOD is required")
      .isFloat()
      .withMessage("PERIOD must be float"),
    body("spaceTrack.APOAPSIS")
      .exists()
      .withMessage("APOAPSIS is required")
      .notEmpty()
      .withMessage("APOAPSIS cannot be null")
      .isFloat()
      .withMessage("APOAPSIS must be float"),
    body("spaceTrack.PERIAPSIS")
      .exists()
      .withMessage("PERIAPSIS is required")
      .notEmpty()
      .withMessage("PERIAPSIS cannot be null")
      .isFloat()
      .withMessage("APOPERIAPSISAPSIS must be float"),
    body("spaceTrack.OBJECT_TYPE")
      .exists()
      .withMessage("OBJECT_TYPE is required")
      .isLength({ max: 12 })
      .withMessage("OBJECT_TYPE must have 12 characters maximum"),
    body("spaceTrack.RCS_SIZE").exists().withMessage("RCS_SIZE is required"),
    body("spaceTrack.COUNTRY_CODE")
      .exists()
      .withMessage("COUNTRY_CODE is required")
      .isLength({ max: 2 })
      .withMessage("COUNTRY_CODE must have 2 characters maximum"),
    body("spaceTrack.LAUNCH_DATE")
      .exists()
      .withMessage("LAUNCH_DATE is required")
      .isLength({ max: 10 })
      .withMessage("LAUNCH_DATE must have 10 characters maximum"),
    body("spaceTrack.SITE").exists().withMessage("SITE is required"),
    body("spaceTrack.DECAY_DATE")
      .exists()
      .withMessage("DECAY_DATE is required")
      .isLength({ max: 10 })
      .withMessage("DECAY_DATE must have 10 characters maximum"),
    body("spaceTrack.DECAYED")
      .exists()
      .withMessage("DECAYED is required")
      .notEmpty()
      .withMessage("DECAYED cannot be null")
      .isFloat()
      .withMessage("DECAYED must be float"),
    body("spaceTrack.FILE")
      .exists()
      .withMessage("FILE is required")
      .isInt()
      .withMessage("FILE must be int"),
    body("spaceTrack.GP_ID")
      .exists()
      .withMessage("GP_ID is required")
      .isInt()
      .withMessage("GP_ID must be int"),
    body("spaceTrack.TLE_LINE0")
      .exists()
      .withMessage("TLE_LINE0 is required")
      .isLength({ max: 27 })
      .withMessage("TLE_LINE0 must have 27 characters maximum"),
    body("spaceTrack.TLE_LINE1")
      .exists()
      .withMessage("TLE_LINE1 is required")
      .isLength({ max: 71 })
      .withMessage("TLE_LINE1 must have 71 characters maximum"),
    body("spaceTrack.TLE_LINE2")
      .exists()
      .withMessage("TLE_LINE2 is required")
      .isLength({ max: 71 })
      .withMessage("TLE_LINE2 must have 71 characters maximum"),
  ],
};

module.exports = spaceTrackValidation;
